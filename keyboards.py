from telebot import types
from ibm_translate import voices

languages = {
    'avto': '–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ',
    'hu': '–í–µ–Ω–≥–µ—Ä—Å–∫–∏–π',
    'en': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
    'vi': '–í—å–µ—Ç–Ω–∞–º—Å–∫–∏–π',
    'ar': '–ê—Ä–∞–±—Å–∫–∏–π',
    'nl': '–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π',
    'bn': '–ë–µ–Ω–≥–∞–ª—å—Å–∫–∏–π',
    'el': '–ì—Ä–µ—á–µ—Å–∫–∏–π',
    'bg': '–ë–æ–ª–≥–∞—Ä—Å–∫–∏–π',
    'gu': '–ì—É–¥–∂–∞—Ä–∞—Ç–∏',
    'bs': '–ë–æ—Å–Ω–∏–π—Å–∫–∏–π',
    'da': '–î–∞—Ç—Å–∫–∏–π',
    'cy': '–í–∞–ª–ª–∏–π—Å–∫–∏–π',
    'he': '–ò–≤—Ä–∏—Ç',

    'id': '–ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π',
    'lv': '–õ–∞—Ç—ã—à—Å–∫–∏–π',
    'ga': '–ò—Ä–ª–∞–Ω–¥—Å–∏–∫–π',
    'lt': '–õ–∏—Ç–æ–≤—Å–∫–∏–π',
    'es': '–ò—Å–ø–∞–Ω–∏—Å–∫–π',
    'ms': '–ú–∞–ª–∞–π—Å–∫–∏–π',
    'it': '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π',
    'ml': '–ú–∞–ª–∞—è–ª–∞–º',
    'zh-TW': '–ö–∏—Ç–∞–π—Å–∫–∏–π (—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π)',
    'mt': '–ú–∞–ª—å—Ç–∏–π—Å–∫–∏–π',
    'zh': "–ö–∏—Ç–∞–π—Å–∏–∫–π (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)",
    'de': '–ù–µ–º–µ—Ü–∫–∏–π',
    'ko': '–ö–æ—Ä–µ–π—Å–∫–∏–π',
    'ne': '–ù–µ–ø–∞–ª—å—Å–∫–∏–π',

    'nb': '–ù–æ—Ä–≤–µ–∂—Å–∫–∏–π –±—É–∫–º–æ–ª',
    'sl': '–°–ª–æ–≤–µ–Ω—Å–∫–∏–π',
    'pl': '–ü–æ–ª—å—Å–∫–∏–π',
    'th': '–¢–∞–π—Å–∫–∏–π',
    'pt': '–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π',
    'ta': '–¢–∞–º–∏–ª—å—Å–∫–∏–π',
    'ro': '–†—É–º—ã–Ω—Å–∫–∏–π',
    'te': '–¢–µ–ª—É–≥—É',
    'ru': '–†—É—Å—Å–∫–∏–π',
    'tr': '–¢—É—Ä–µ—Ü–∫–∏–π',
    'si': '–°–∏–Ω–≥–∞–ª—å—Å–∫–∏–π',
    'uk': '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π',
    'sk': '–°–ª–æ–≤–∞—Ü–∫–∏–π',
    'ur': '–£—Ä–¥—É',

    'fi': '–§–∏–Ω—Å–∫–∏–π',
    'cs': '–ß–µ—à—Å–∫–∏–π',
    'fr': '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π',
    'sv': '–®–≤–µ–¥—Å–∫–∏–π',
    'hi': '–•–∏–Ω–¥–∏',
    'et': '–≠—Å—Ç–æ–Ω—Å–∫–∏–π',
    'hr': '–•–æ—Ä–≤–∞—Ç—Å–∫–∏–π',
    'ja': '–Ø–ø–æ–Ω—Å–∫–∏–π',
}

lang_audio = ('en', 'ar', 'nl', 'es', 'it', 'de', 'ko', 'pt', 'fr', 'ja')


def index_search(language):
    dictionary = languages.copy()

    index = 0
    page = 0

    for i, j in dictionary.items():
        if i == language:
            index = list(dictionary).index(i)

    while index not in range(page, page + 14):
        page = page + 14

    return page


def emoji(language, flag):
    if flag == 'target':
        for i in range(0, len(voices)):
            if language == list(voices.keys())[i][:2]:
                return ' üîä'
    else:
        for i in range(0, len(lang_audio)):
            if language == lang_audio[i]:
                return ' üé§'
    return ''


def accept(language, button):
    if language == button:
        return '‚úÖ '
    else:
        return ''


def translate_keyboard(language, page, flag):
    keyboard = types.InlineKeyboardMarkup(row_width=2)

    for i in range(page, page + 14, 2):

        if i == 50:
            break

        button1 = types.InlineKeyboardButton(text=accept(language, list(languages.keys())[i]) + list(languages.values())[i] + emoji(list(languages.keys())[i], flag), callback_data=list(languages.keys())[i])

        button2 = types.InlineKeyboardButton(text=accept(language, list(languages.keys())[i+1]) + list(languages.values())[i + 1] + emoji(list(languages.keys())[i], flag), callback_data=list(languages.keys())[i + 1])

        keyboard.add(button1, button2)

    if page == 0:
        button_next = types.InlineKeyboardButton(text='‚û°', callback_data='next')
        keyboard.add(button_next)
    elif page == 42:
        button_previous = types.InlineKeyboardButton(text='‚¨Ö', callback_data='previous')
        keyboard.add(button_previous)
    else:
        button_next = types.InlineKeyboardButton(text='‚û°', callback_data='next')
        button_previous = types.InlineKeyboardButton(text='‚¨Ö', callback_data='previous')
        keyboard.add(button_previous, button_next)

    return keyboard


def audio_accompaniment(switch):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    if switch == 'off':
        button1 = types.InlineKeyboardButton(text='–í–∫–ª', callback_data='on')
        button2 = types.InlineKeyboardButton(text='‚úÖ –û—Ç–∫–ª', callback_data='off')
    else:
        button1 = types.InlineKeyboardButton(text='‚úÖ –í–∫–ª', callback_data='on')
        button2 = types.InlineKeyboardButton(text='–û—Ç–∫–ª', callback_data='off')
    keyboard.add(button1, button2)
    return keyboard
