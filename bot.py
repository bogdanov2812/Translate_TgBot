import telebot
import os

from io import BytesIO

import requests
import keyboards


from ibm_translate import *


TOKEN = os.environ["TOKEN"]
bot = telebot.TeleBot(TOKEN)


class Language:
    def __init__(self):
        self.source = 'en'
        self.source_page = 0
        self.target = 'ru'
        self.target_page = 0
        self.audio = 'off'


language = Language()


@bot.message_handler(commands={'start'})
def start_window(message):
    bot.send_message(message.chat.id, '–≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –º–Ω–æ–≥–∏–µ —è–∑—ã–∫–∏, –∞ —Ç–∞–∫–∂–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≤–µ–¥–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≥–æ–ª–æ—Å–æ–º\n'
                                      '–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "/from" \n'
                                      '–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "/to" \n'
                                      '–ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "/audio" \n'
                                      '–î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ –ø–æ–ª–µ "–°–æ–æ–±—â–µ–Ω–∏–µ..." –∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å! \n'
                                      '–Ø–∑—ã–∫–∏, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –æ—Ç–º–µ—á–µ–Ω—ã –∑–Ω–∞—á–∫–æ–º üé§ \n'
                                      '–Ø–∑—ã–∫–∏, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç–º–µ—á–µ–Ω—ã –∑–Ω–∞—á–∫–æ–º üîä \n')
    
@bot.message_handler(commands={'help'})
def start_window(message):
    bot.send_message(message.chat.id, '–°–ø—Ä–∞–≤–∫–∞ \n'
                                      '–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "/from" \n'
                                      '–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "/to" \n'
                                      '–ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "/audio" \n'
                                      '–î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ –ø–æ–ª–µ "–°–æ–æ–±—â–µ–Ω–∏–µ..." –∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å! \n'
                                      '–Ø–∑—ã–∫–∏, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –æ—Ç–º–µ—á–µ–Ω—ã –∑–Ω–∞—á–∫–æ–º üé§ \n'
                                      '–Ø–∑—ã–∫–∏, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç–º–µ—á–µ–Ω—ã –∑–Ω–∞—á–∫–æ–º üîä \n')    


@bot.message_handler(content_types=['voice'])
def voice_processing(message):
    file_info = bot.get_file(message.voice.file_id)
    file = requests.get('https://api.telegram.org/file/bot{0}/{1}'.format(TOKEN, file_info.file_path))
    audio = file.content

    speech_models = speech_to_text.list_models().get_result()
    speech_models = speech_models['models']

    for i in range(0, len(speech_models)):
        if language.source == speech_models[i]['language'][:2]:
            text = speech_to_text.recognize(audio=BytesIO(audio), model=speech_models[i]['name'], content_type='audio/ogg;codecs=opus').get_result()
            if len(text['results']) == 0:
                bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–µ—Ñ–∏–∫–∞—Ü–∏–∏')
                return
            else:
                text = text['results'][0]['alternatives'][0]['transcript']
                translation = language_translator.translate(text=[text],
                                                            source=language.source,
                                                            target=language.target).get_result()
                translation = translation['translations'][0]['translation']
                message1 = bot.send_message(message.chat.id, translation, reply_to_message_id=message.message_id)
                if language.audio == 'on':
                    try:
                        bot.send_voice(message.chat.id, select_voice(translation, language.target), reply_to_message_id=message1.message_id)
                    except Exception as e:
                        print(e)
                break
    else:
        bot.send_message(message.chat.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ —è–∑—ã–∫, –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞')


@bot.message_handler(commands={'audio', 'from', 'to'})
def commands(message):
    try:
        if message.text == '/audio':
            bot.send_message(message.chat.id, "–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≥–æ–ª–æ—Å–æ–º", reply_markup=keyboards.audio_accompaniment(language.audio))
        elif message.text == '/from':
            language.source_page = keyboards.index_search(language.source)
            bot.send_message(message.chat.id, "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç —Å —è–∑—ã–∫–∞:",
                             reply_markup=keyboards.translate_keyboard(language.source, language.source_page, 'source'))
        elif message.text == '/to':
            language.target_page = keyboards.index_search(language.target)
            bot.send_message(message.chat.id, "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —è–∑—ã–∫:",
                             reply_markup=keyboards.translate_keyboard(language.target, language.target_page, 'target'))
    except Exception as e:
        print(e)


@bot.callback_query_handler(func=lambda call: True)
def keyboards_calls(call):
    try:
        if call.message.text == '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç —Å —è–∑—ã–∫–∞:':
            if call.data == 'next':
                language.source_page += 14
            elif call.data == 'previous':
                language.source_page -= 14
            else:
                language.source = call.data
                name = find_name(keyboards.languages, language.source)
                bot.send_message(call.message.chat.id, "–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å —è–∑—ã–∫–∞: " + name.lower())
            bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                          reply_markup=keyboards.translate_keyboard(language.source, language.source_page, 'source'))

        elif call.message.text == '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —è–∑—ã–∫:':
            if call.data == 'next':
                language.target_page += 14
            elif call.data == 'previous':
                language.target_page -= 14
            elif call.data != 'avto':
                language.target = call.data
                name = find_name(keyboards.languages, language.target)
                bot.send_message(call.message.chat.id, text='–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —è–∑—ã–∫: ' + name.lower())
            bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                          reply_markup=keyboards.translate_keyboard(language.target, language.target_page, 'target'))

        elif call.message.text == '–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≥–æ–ª–æ—Å–æ–º':
            language.audio = call.data
            bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                          reply_markup=keyboards.audio_accompaniment(language.audio))

    except Exception as e:
        print(e)


@bot.message_handler(func=lambda message: True)
def translate(message):
    translate_text = message.text

    if language.source == 'avto':  # –í –∫–∞—á–µ—Å—Ç–≤–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤—ã–±—Ä–∞–Ω–æ "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"
        source_language = response_to_list(language_translator.identify(translate_text).get_result())  # –†–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        source_language = language_identification(keyboards.languages, source_language)
        if source_language == 0:
            bot.send_message(message.chat.id, "–ò–¥–µ–Ω—Ç–µ—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —è–∑—ã–∫ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
            return
        elif source_language[0] == language.target:
            bot.send_message(message.chat.id, '–ò–¥–µ–Ω—Ç–µ—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —è–∑—ã–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ü–µ–ª–µ–≤—ã–º —è–∑—ã–∫–æ–º')
            return

        bot.send_message(message.chat.id, '–ò–¥–µ–Ω—Ç–µ—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —è–∑—ã–∫: ' + source_language[1].lower())
        translation = language_translator.translate(text=[translate_text], source=source_language[0], target=language.target).get_result()
    elif language.source == language.target:
        bot.send_message(message.chat.id, '–ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ü–µ–ª–µ–≤—ã–º')
        return
    else:
        translation = language_translator.translate(text=[translate_text], source=language.source, target=language.target).get_result()

    translation = json.dumps(translation, indent=2, ensure_ascii=False)
    translation = json.loads(translation)
    translation = translation['translations'][0]['translation']

    print(translation)

    message1 = bot.send_message(message.chat.id, translation, reply_to_message_id=message.message_id)

    if language.audio == 'on':
        try:
            bot.send_voice(message.chat.id, select_voice(translation, language.target), reply_to_message_id=message1.message_id)
        except Exception as e:
            print(e)


bot.polling(none_stop=True, timeout=60)
